TESTED:

delay
switch
genrator
flag
source

IMPLMENTED:

counter auto reset (single)
counter manual reset (single)

hold timer (single byte)
hold timer (double byte)

WRITEN:

pulsar (single byte) v1
pulsar (single byte) v2
sequencer

TODO:

pulsar (double byte)
mono timer (single byte)
mono timer (double byte)
counter auto reset (double)
counter manual reset (double)




cycle=number of cycles for node
n=number of output nodes


pulsar (single) (cycle=14+n)

Btfss imput_state
goto off
incf pulsar_counter
MOvlw loop_val
xorfw pulsar_counter
btFSS status,z
goto skip

movlfw d'2^i'
xorfw prev_state[:-2],F
BTFSS prev_state
goto skip_out

BSF output
BSF output
BSF outputs...

goto end

off CLRF pulsar_counter
BCF prev_state
delay 3
skip delay 4
skip_out delay n+1
end BCF input_state


sequencer: (cycle=3n+10)

BTFSS prev_edge
BTFSS input_state
goto no_inc 

BTFSS seq_1
goto not_seq_1
BCF seq_1
BSF seq_2
delay start at (n-1)*3 and count down
goto end
not_seq_1 

BTFSS seq_2
goto not_seq_2
BCF seq_2
BSF seq_3
delay 3
goto end
not_seq_2

BTFSS seq_3
goto not_seq_3
BCF seq_3
BSF seq_1
delay 0
goto end
not_seq_3

BSF seq_1 #first lopop init -timing may be off
goto end

no_inc Delay 3n+2

end BCF input_state
BCF prev_edge
BTFSC input_state
BSF prev_edge 19



pulsar: (single byte)(cycle=13+n) ##buged no positive


BTFSS input_state
goto no_act

INCF pular_counter,F

MOVLW up_to
XORFW pular_counter,W
BTFSS STATUS,Z
goto just_inc

CLRF pular_counter

BTFSS state_flag
goto off

BSF output_states...
BSF output_states...
BSF output_states...
BSF output_states...

goto end

no_act CLRF pular_counter
BCF state_flag
delay 3

just_inc delay 3
off delay 1+n
end BCF input_state




hold timer: (double byte) (cycle=n+24)

BTFSS input_state
goto no_rest

MOVLW time/total_cycles_lo
MOVWF counter_lo

MOVLW time/total_cycles_hi
MOVWF counter_hi

goto end_temp

no_rest Delay 5
end_temp

CLEAR W
XORLW counter_lo,W

BTFSC STATUS,Z
goto skip1

CLRF W
XORLW counter_hi,W

BTFSC STATUS,Z
goto skip2

CLRF W
XORWF counter_lo,W
BTFSC STAUTS Z
DECF counter_hi,F
DECF counter_lo,F

BSF output
BSF outputs...
goto end
skip1 Delay 4
skip2 Delay 6+n

end BCF input_state



hold timer: (singluar byte) (cycle=14+n)

BTFSS input_state
goto no_rest
MOVLW time/total_cycles
MOVWF counter
goto end_temp

no_rest NOP
NOP
NOP
end_temp

CLEAR W
XORLW counter,W
BTFSC STATUS,Z
goto skip
DECF counter,F
BSF output
BSF outputs...
goto end
skip Delay n+2
end BCF input_state


counter manual reset: (cycle=15+n)

BTFSC reset_input
CLRF counter_file,F

BTFSS prev_edge
BTFSS input_state
goto no_act

MOVLW upto
XORFW counter_file,W
BTFSS STATUS,Z
goto increment

BSF output
BSF output
BSF output...
goto end

no_act Delay 3+n
goto end

increment INCF counter_file,F

end BCF input_state
BCF prev_edge
BTFSC input_state
BSF prev_edge



counter auto reset: (cycle=15+n)


BTFSS prev_edge
BTFSS input_state
goto no_act

INCF counter_file,F
MOVLW up_to
XORFW counterfile,W
BTFSC STATUS,Z
goto SKIP

CLRF counter_file
BSF outputs
BSF outputs
BSF outputs...
goto end

no_act Delay 5+n
goto end

skip Delay n+2

end BCF input_state
BCF prev_edge
BTFSC input_state
BSF prev_edge


switch: (cycle= 6+n)
BTFSC input_state 
BTFSS read_flag #if inverter change to BTFSC

goto skip
BSF outputs
BSF outputs...
goto end
skip Delay n+1

end BCF input_state


genrator: (cycle= 4+n)
BTFSS Flag_name #if inverter change to BTFSC
goto skip

BSF outputs
BSF outputs...
goto end
skip Delay 1+n
end

flag: (cycle= 4)
BCF Flagname
BTFSC input_state
BSF flagname
BCF input_state

source: (cycle= n)
BSF output
BSF outputs ...

#1 cycle delay
NOP

#2 cycle delay
NOP
NOP

#3 cycle delay
NOP
NOP
NOP

#4 cycle delay
call small_delay_4

#5 cycle delay
call small_delay_5

#6 cycle delay
call small_delay_6

#7 cycle delay
Movlw 0
call delay3_1

#8 cycle delay
Movlw 0
call delay3_2

#9 cycle delay
Movlw 0
call delay3_3

#10 cycle delay
Movlw 1
call delay3_1


small_delay_6 nop
small_delay_5 nop
small_delay_4 return


delay3_3 Nop
delay3_2 Nop
delay3_1 Decfsz w,w
goto delay1_1
return